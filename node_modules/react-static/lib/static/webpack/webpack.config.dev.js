"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));

var _webpack = _interopRequireDefault(require("webpack"));

var _resolveFrom = _interopRequireDefault(require("resolve-from"));

var _htmlWebpackPlugin = _interopRequireDefault(require("html-webpack-plugin"));

var _caseSensitivePathsWebpackPlugin = _interopRequireDefault(require("case-sensitive-paths-webpack-plugin"));

var _extractCssChunksWebpackPlugin = _interopRequireDefault(require("extract-css-chunks-webpack-plugin"));

var _path = _interopRequireDefault(require("path"));

var _rules = _interopRequireDefault(require("./rules"));

function _default(_ref) {
  var config = _ref.config;
  var _config$paths = config.paths,
      DIST = _config$paths.DIST,
      NODE_MODULES = _config$paths.NODE_MODULES,
      SRC = _config$paths.SRC,
      HTML_TEMPLATE = _config$paths.HTML_TEMPLATE;
  process.env.REACT_STATIC_BASE_PATH = config.basePath;
  process.env.REACT_STATIC_PUBLIC_PATH = config.publicPath;
  process.env.REACT_STATIC_ASSETS_PATH = config.assetsPath;
  return {
    mode: 'development',
    optimization: {
      noEmitOnErrors: true,
      concatenateModules: true
    },
    context: _path.default.resolve(__dirname, '../../../node_modules'),
    entry: ["webpack-dev-server/client?".concat(config.devServer.host, ":").concat(config.devServer.port), 'webpack/hot/only-dev-server'].concat((0, _toConsumableArray2.default)(config.disableRuntime ? [] : [require.resolve('../../bootstrapPlugins'), require.resolve('../../bootstrapTemplates')]), [config.entry]).filter(Boolean),
    output: {
      filename: '[name].js',
      // never hash dev code
      chunkFilename: 'templates/[name].js',
      path: DIST,
      publicPath: process.env.REACT_STATIC_ASSETS_PATH || '/'
    },
    module: {
      rules: (0, _rules.default)({
        config: config,
        stage: 'dev'
      }),
      strictExportPresence: true
    },
    resolve: {
      modules: [NODE_MODULES, SRC, DIST].concat((0, _toConsumableArray2.default)([NODE_MODULES, SRC, DIST].map(function (d) {
        return _path.default.relative(__dirname, d);
      })), ['node_modules']),
      extensions: ['.wasm', '.mjs', '.js', '.json', '.jsx'],
      alias: {
        react: (0, _resolveFrom.default)(config.paths.NODE_MODULES, 'react'),
        'react-dom': (0, _resolveFrom.default)(__dirname, '@hot-loader/react-dom')
      }
    },
    plugins: [new _webpack.default.EnvironmentPlugin(process.env), new _htmlWebpackPlugin.default({
      inject: true,
      template: "!!raw-loader!".concat(HTML_TEMPLATE)
    }), new _webpack.default.HotModuleReplacementPlugin(), new _webpack.default.NamedModulesPlugin(), new _caseSensitivePathsWebpackPlugin.default(), new _extractCssChunksWebpackPlugin.default({
      filename: '[name].css'
    })],
    devtool: 'cheap-module-source-map'
  };
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9zdGF0aWMvd2VicGFjay93ZWJwYWNrLmNvbmZpZy5kZXYuanMiXSwibmFtZXMiOlsiY29uZmlnIiwicGF0aHMiLCJESVNUIiwiTk9ERV9NT0RVTEVTIiwiU1JDIiwiSFRNTF9URU1QTEFURSIsInByb2Nlc3MiLCJlbnYiLCJSRUFDVF9TVEFUSUNfQkFTRV9QQVRIIiwiYmFzZVBhdGgiLCJSRUFDVF9TVEFUSUNfUFVCTElDX1BBVEgiLCJwdWJsaWNQYXRoIiwiUkVBQ1RfU1RBVElDX0FTU0VUU19QQVRIIiwiYXNzZXRzUGF0aCIsIm1vZGUiLCJvcHRpbWl6YXRpb24iLCJub0VtaXRPbkVycm9ycyIsImNvbmNhdGVuYXRlTW9kdWxlcyIsImNvbnRleHQiLCJwYXRoIiwicmVzb2x2ZSIsIl9fZGlybmFtZSIsImVudHJ5IiwiZGV2U2VydmVyIiwiaG9zdCIsInBvcnQiLCJkaXNhYmxlUnVudGltZSIsInJlcXVpcmUiLCJmaWx0ZXIiLCJCb29sZWFuIiwib3V0cHV0IiwiZmlsZW5hbWUiLCJjaHVua0ZpbGVuYW1lIiwibW9kdWxlIiwicnVsZXMiLCJzdGFnZSIsInN0cmljdEV4cG9ydFByZXNlbmNlIiwibW9kdWxlcyIsIm1hcCIsImQiLCJyZWxhdGl2ZSIsImV4dGVuc2lvbnMiLCJhbGlhcyIsInJlYWN0IiwicGx1Z2lucyIsIndlYnBhY2siLCJFbnZpcm9ubWVudFBsdWdpbiIsIkh0bWxXZWJwYWNrUGx1Z2luIiwiaW5qZWN0IiwidGVtcGxhdGUiLCJIb3RNb2R1bGVSZXBsYWNlbWVudFBsdWdpbiIsIk5hbWVkTW9kdWxlc1BsdWdpbiIsIkNhc2VTZW5zaXRpdmVQYXRoc1BsdWdpbiIsIkV4dHJhY3RDc3NDaHVua3MiLCJkZXZ0b29sIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7OztBQUFBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOztBQUVBOztBQUVlLHdCQUFxQjtBQUFBLE1BQVZBLE1BQVUsUUFBVkEsTUFBVTtBQUFBLHNC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aUJBQVFLLDBCQUFaLEVBTk8sRUFPUCxJQUFJTCxpQkFBUU0sa0JBQVosRUFQTyxFQVFQLElBQUlDLHdDQUFKLEVBUk8sRUFTUCxJQUFJQyxzQ0FBSixDQUFxQjtBQUFFdEIsTUFBQUEsUUFBUSxFQUFFO0FBQVosS0FBckIsQ0FUTyxDQTVDSjtBQXdETHVCLElBQUFBLE9BQU8sRUFBRTtBQXhESixHQUFQO0FBMEREIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHdlYnBhY2sgZnJvbSAnd2VicGFjaydcbmltcG9ydCByZXNvbHZlRnJvbSBmcm9tICdyZXNvbHZlLWZyb20nXG5pbXBvcnQgSHRtbFdlYnBhY2tQbHVnaW4gZnJvbSAnaHRtbC13ZWJwYWNrLXBsdWdpbidcbmltcG9ydCBDYXNlU2Vuc2l0aXZlUGF0aHNQbHVnaW4gZnJvbSAnY2FzZS1zZW5zaXRpdmUtcGF0aHMtd2VicGFjay1wbHVnaW4nXG5pbXBvcnQgRXh0cmFjdENzc0NodW5rcyBmcm9tICdleHRyYWN0LWNzcy1jaHVua3Mtd2VicGFjay1wbHVnaW4nXG5pbXBvcnQgcGF0aCBmcm9tICdwYXRoJ1xuXG5pbXBvcnQgcnVsZXMgZnJvbSAnLi9ydWxlcydcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oeyBjb25maWcgfSkge1xuICBjb25zdCB7IERJU1QsIE5PREVfTU9EVUxFUywgU1JDLCBIVE1MX1RFTVBMQVRFIH0gPSBjb25maWcucGF0aHNcblxuICBwcm9jZXNzLmVudi5SRUFDVF9TVEFUSUNfQkFTRV9QQVRIID0gY29uZmlnLmJhc2VQYXRoXG4gIHByb2Nlc3MuZW52LlJFQUNUX1NUQVRJQ19QVUJMSUNfUEFUSCA9IGNvbmZpZy5wdWJsaWNQYXRoXG4gIHByb2Nlc3MuZW52LlJFQUNUX1NUQVRJQ19BU1NFVFNfUEFUSCA9IGNvbmZpZy5hc3NldHNQYXRoXG5cbiAgcmV0dXJuIHtcbiAgICBtb2RlOiAnZGV2ZWxvcG1lbnQnLFxuICAgIG9wdGltaXphdGlvbjoge1xuICAgICAgbm9FbWl0T25FcnJvcnM6IHRydWUsXG4gICAgICBjb25jYXRlbmF0ZU1vZHVsZXM6IHRydWUsXG4gICAgfSxcbiAgICBjb250ZXh0OiBwYXRoLnJlc29sdmUoX19kaXJuYW1lLCAnLi4vLi4vLi4vbm9kZV9tb2R1bGVzJyksXG4gICAgZW50cnk6IFtcbiAgICAgIGB3ZWJwYWNrLWRldi1zZXJ2ZXIvY2xpZW50PyR7Y29uZmlnLmRldlNlcnZlci5ob3N0fToke1xuICAgICAgICBjb25maWcuZGV2U2VydmVyLnBvcnRcbiAgICAgIH1gLFxuICAgICAgJ3dlYnBhY2svaG90L29ubHktZGV2LXNlcnZlcicsXG4gICAgICAuLi4oY29uZmlnLmRpc2FibGVSdW50aW1lXG4gICAgICAgID8gW11cbiAgICAgICAgOiBbXG4gICAgICAgICAgICByZXF1aXJlLnJlc29sdmUoJy4uLy4uL2Jvb3RzdHJhcFBsdWdpbnMnKSxcbiAgICAgICAgICAgIHJlcXVpcmUucmVzb2x2ZSgnLi4vLi4vYm9vdHN0cmFwVGVtcGxhdGVzJyksXG4gICAgICAgICAgXSksXG4gICAgICBjb25maWcuZW50cnksXG4gICAgXS5maWx0ZXIoQm9vbGVhbiksXG4gICAgb3V0cHV0OiB7XG4gICAgICBmaWxlbmFtZTogJ1tuYW1lXS5qcycsIC8vIG5ldmVyIGhhc2ggZGV2IGNvZGVcbiAgICAgIGNodW5rRmlsZW5hbWU6ICd0ZW1wbGF0ZXMvW25hbWVdLmpzJyxcbiAgICAgIHBhdGg6IERJU1QsXG4gICAgICBwdWJsaWNQYXRoOiBwcm9jZXNzLmVudi5SRUFDVF9TVEFUSUNfQVNTRVRTX1BBVEggfHwgJy8nLFxuICAgIH0sXG4gICAgbW9kdWxlOiB7XG4gICAgICBydWxlczogcnVsZXMoeyBjb25maWcsIHN0YWdlOiAnZGV2JyB9KSxcbiAgICAgIHN0cmljdEV4cG9ydFByZXNlbmNlOiB0cnVlLFxuICAgIH0sXG4gICAgcmVzb2x2ZToge1xuICAgICAgbW9kdWxlczogW1xuICAgICAgICBOT0RFX01PRFVMRVMsXG4gICAgICAgIFNSQyxcbiAgICAgICAgRElTVCxcbiAgICAgICAgLi4uW05PREVfTU9EVUxFUywgU1JDLCBESVNUXS5tYXAoZCA9PiBwYXRoLnJlbGF0aXZlKF9fZGlybmFtZSwgZCkpLFxuICAgICAgICAnbm9kZV9tb2R1bGVzJyxcbiAgICAgIF0sXG4gICAgICBleHRlbnNpb25zOiBbJy53YXNtJywgJy5tanMnLCAnLmpzJywgJy5qc29uJywgJy5qc3gnXSxcbiAgICAgIGFsaWFzOiB7XG4gICAgICAgIHJlYWN0OiByZXNvbHZlRnJvbShjb25maWcucGF0aHMuTk9ERV9NT0RVTEVTLCAncmVhY3QnKSxcbiAgICAgICAgJ3JlYWN0LWRvbSc6IHJlc29sdmVGcm9tKF9fZGlybmFtZSwgJ0Bob3QtbG9hZGVyL3JlYWN0LWRvbScpLFxuICAgICAgfSxcbiAgICB9LFxuICAgIHBsdWdpbnM6IFtcbiAgICAgIG5ldyB3ZWJwYWNrLkVudmlyb25tZW50UGx1Z2luKHByb2Nlc3MuZW52KSxcbiAgICAgIG5ldyBIdG1sV2VicGFja1BsdWdpbih7XG4gICAgICAgIGluamVjdDogdHJ1ZSxcbiAgICAgICAgdGVtcGxhdGU6IGAhIXJhdy1sb2FkZXIhJHtIVE1MX1RFTVBMQVRFfWAsXG4gICAgICB9KSxcbiAgICAgIG5ldyB3ZWJwYWNrLkhvdE1vZHVsZVJlcGxhY2VtZW50UGx1Z2luKCksXG4gICAgICBuZXcgd2VicGFjay5OYW1lZE1vZHVsZXNQbHVnaW4oKSxcbiAgICAgIG5ldyBDYXNlU2Vuc2l0aXZlUGF0aHNQbHVnaW4oKSxcbiAgICAgIG5ldyBFeHRyYWN0Q3NzQ2h1bmtzKHsgZmlsZW5hbWU6ICdbbmFtZV0uY3NzJyB9KSwgLy8gbmV2ZXIgaGFzaCBkZXYgY29kZVxuICAgICAgLy8gbmV3IFdlYnBhY2tEYXNoYm9hcmQoKSxcbiAgICBdLFxuICAgIGRldnRvb2w6ICdjaGVhcC1tb2R1bGUtc291cmNlLW1hcCcsXG4gIH1cbn1cbiJdfQ==
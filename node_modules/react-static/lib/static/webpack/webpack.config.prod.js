"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));

var _objectSpread2 = _interopRequireDefault(require("@babel/runtime/helpers/objectSpread"));

var _webpack = _interopRequireDefault(require("webpack"));

var _path = _interopRequireDefault(require("path"));

var _caseSensitivePathsWebpackPlugin = _interopRequireDefault(require("case-sensitive-paths-webpack-plugin"));

var _webpackBundleAnalyzer = require("webpack-bundle-analyzer");

var _terserWebpackPlugin = _interopRequireDefault(require("terser-webpack-plugin"));

var _webpackNodeExternals = _interopRequireDefault(require("webpack-node-externals"));

var _extractCssChunksWebpackPlugin = _interopRequireDefault(require("extract-css-chunks-webpack-plugin"));

var _optimizeCssAssetsWebpackPlugin = _interopRequireDefault(require("optimize-css-assets-webpack-plugin"));

var _resolveFrom = _interopRequireDefault(require("resolve-from"));

var _rules = _interopRequireDefault(require("./rules"));

//
function common(state) {
  var analyze = state.analyze,
      config = state.config,
      debug = state.debug;
  var _config$paths = config.paths,
      ROOT = _config$paths.ROOT,
      DIST = _config$paths.DIST,
      NODE_MODULES = _config$paths.NODE_MODULES,
      SRC = _config$paths.SRC,
      ASSETS = _config$paths.ASSETS;
  process.env.REACT_STATIC_ENTRY_PATH = config.entry;
  process.env.REACT_STATIC_SITE_ROOT = config.siteRoot;
  process.env.REACT_STATIC_BASE_PATH = config.basePath;
  process.env.REACT_STATIC_PUBLIC_PATH = config.publicPath;
  process.env.REACT_STATIC_ASSETS_PATH = config.assetsPath;

  if (!DIST.startsWith(ROOT)) {
    // we build outside of project dir, so reset some paths
    process.env.REACT_STATIC_ASSETS_PATH = config.assetsPath.replace(DIST, '');
  }

  var splitChunks = {
    chunks: 'all',
    minSize: 10000,
    minChunks: 1,
    maxAsyncRequests: 5,
    maxInitialRequests: 5,
    automaticNameDelimiter: '~',
    name: true,
    cacheGroups: {
      vendors: {
        test: /[\\/]node_modules[\\/]/,
        priority: -10,
        chunks: 'all'
      },
      default: {
        minChunks: 2,
        priority: -20,
        reuseExistingChunk: true
      }
    }
  };
  var extrackCSSChunks = new _extractCssChunksWebpackPlugin.default({
    filename: '[name].[chunkHash:8].css',
    chunkFilename: '[id].[chunkHash:8].css'
  });

  if (!config.extractCssChunks) {
    splitChunks.cacheGroups = {
      styles: {
        name: 'styles',
        test: /\.css$/,
        chunks: 'all',
        enforce: true
      }
    };
    extrackCSSChunks = new _extractCssChunksWebpackPlugin.default({
      filename: '[name].[chunkHash:8].css'
    });
  }

  return {
    mode: 'production',
    context: _path.default.resolve(__dirname, '../../../node_modules'),
    entry: config.disableRuntime ? config.entry : [require.resolve('../../bootstrapPlugins'), require.resolve('../../bootstrapTemplates'), require.resolve('../../bootstrapApp')],
    output: {
      filename: '[name].[hash:8].js',
      // dont use chunkhash, its not a chunk
      chunkFilename: 'templates/[name].[chunkHash:8].js',
      path: ASSETS,
      publicPath: process.env.REACT_STATIC_ASSETS_PATH || '/'
    },
    optimization: {
      sideEffects: true,
      minimize: true,
      minimizer: [new _terserWebpackPlugin.default((0, _objectSpread2.default)({
        cache: true,
        parallel: true,
        exclude: /\.min\.js/
      }, config.terser, {
        sourceMap: config.productionSourceMaps || config.terser.sourceMap || debug,
        terserOptions: (0, _objectSpread2.default)({
          ie8: false
        }, config.terser.terserOptions, {
          mangle: (0, _objectSpread2.default)({
            safari10: true
          }, config.terser.terserOptions.mangle),
          parse: (0, _objectSpread2.default)({
            ecma: 8
          }, config.terser.terserOptions.parse),
          compress: (0, _objectSpread2.default)({
            ecma: 5
          }, config.terser.terserOptions.compress),
          output: (0, _objectSpread2.default)({
            ecma: 5
          }, config.terser.terserOptions.output)
        })
      })), new _optimizeCssAssetsWebpackPlugin.default({})],
      splitChunks: splitChunks
    },
    performance: {
      maxEntrypointSize: 300000
    },
    module: {
      rules: (0, _rules.default)({
        config: config,
        stage: 'prod',
        isNode: false
      }),
      strictExportPresence: true
    },
    resolve: {
      modules: [NODE_MODULES, SRC, DIST].concat((0, _toConsumableArray2.default)([NODE_MODULES, SRC, DIST].map(function (d) {
        return DIST.startsWith(ROOT) ? _path.default.relative(__dirname, d) : _path.default.resolve(d);
      })), ['node_modules']),
      extensions: ['.wasm', '.mjs', '.js', '.json', '.jsx'],
      alias: {
        react: (0, _resolveFrom.default)(config.paths.NODE_MODULES, 'react'),
        'react-dom': (0, _resolveFrom.default)(config.paths.NODE_MODULES, 'react-dom'),
        'react-universal-component': (0, _resolveFrom.default)(__dirname, 'react-universal-component')
      }
    },
    externals: [],
    target: undefined,
    plugins: [new _webpack.default.EnvironmentPlugin(process.env), extrackCSSChunks, new _caseSensitivePathsWebpackPlugin.default(), analyze && new _webpackBundleAnalyzer.BundleAnalyzerPlugin()].filter(function (d) {
      return d;
    }),
    devtool: debug || config.productionSourceMaps ? 'source-map' : false
  };
}

function _default(state) {
  var stage = state.stage,
      paths = state.config.paths;
  var result = common(state);
  if (stage !== 'node') return result; // Node only!!!

  result.output.filename = 'static-app.js';
  result.output.path = paths.ARTIFACTS;
  result.output.libraryTarget = 'umd';
  result.optimization.minimize = false;
  result.optimization.minimizer = [];
  result.target = 'node';
  result.devtool = false;
  result.externals = [new RegExp("".concat(paths.PLUGINS)), function (context, request, callback) {
    var resolved = _path.default.resolve(context, request);

    if ([/react-static\/lib\/browser/, /webpack-flush-chunks/].some(function (d) {
      return d.test(resolved);
    })) {
      return callback(null, "commonjs ".concat(resolved));
    }

    callback();
  }, (0, _webpackNodeExternals.default)()];
  result.module.rules = (0, _rules.default)(state);
  result.plugins = [new _webpack.default.EnvironmentPlugin(process.env), new _caseSensitivePathsWebpackPlugin.default(), new _webpack.default.optimize.LimitChunkCountPlugin({
    maxChunks: 1
  })];
  return result;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,